{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword, onAuthStateChanged, GoogleAuthProvider, signInWithPopup, updateProfile, signOut } from \"firebase/auth\";\nimport initializeAuthentication from '../Pages/Login/Firebase/Firebase.init';\ninitializeAuthentication();\n\nconst useFirebase = () => {\n  _s();\n\n  const [user, setUser] = useState({});\n  const [authError, setAuthError] = useState('');\n  const [isLoading, setIsLoading] = useState(true);\n  const [admin, setAdmin] = useState(false);\n  console.log(admin);\n  const auth = getAuth();\n  const googleProvider = new GoogleAuthProvider();\n\n  const registerUser = (email, password, name, history) => {\n    setIsLoading(true);\n    createUserWithEmailAndPassword(auth, email, password).then(userCredential => {\n      setAuthError('');\n      const newUser = {\n        email,\n        displayName: name\n      };\n      setUser(newUser); //Save user to the database\n\n      saveUser(email, name, 'POST'); // send name to firebase after creation\n\n      updateProfile(auth.currentUser, {\n        displayName: name\n      }).then(() => {}).catch(error => {});\n      history.replace('/');\n    }).catch(error => {\n      setAuthError(error.message);\n      console.log(error);\n    }).finally(() => setIsLoading(false));\n  };\n\n  const loginUser = (email, password, location, history) => {\n    setIsLoading(true);\n    signInWithEmailAndPassword(auth, email, password).then(userCredential => {\n      var _location$state;\n\n      const destination = (location === null || location === void 0 ? void 0 : (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.from) || '/';\n      history.replace(destination);\n      setAuthError('');\n    }).catch(error => {\n      setAuthError(error.message);\n    }).finally(() => setIsLoading(false));\n  };\n\n  const signInWithGoogle = (location, history) => {\n    setIsLoading(true);\n    signInWithPopup(auth, googleProvider).then(result => {\n      var _location$state2;\n\n      const user = result.user;\n      saveUser(user.email, user.displayName, 'PUT');\n      const destination = (location === null || location === void 0 ? void 0 : (_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.from) || '/';\n      history.replace(destination);\n      setAuthError('');\n    }).catch(error => {\n      setAuthError(error.message);\n    }).finally(() => setIsLoading(false));\n  }; // observer user state\n\n\n  useEffect(() => {\n    const unsubscribed = onAuthStateChanged(auth, user => {\n      if (user) {\n        setUser(user);\n      } else {\n        setUser({});\n      }\n\n      setIsLoading(false);\n    });\n    return () => unsubscribed;\n  }, []);\n  useEffect(() => {\n    fetch(`https://polar-savannah-62685.herokuapp.com/users/${user.email}`).then(res => res.json()).then(data => setAdmin(data.admin));\n  }, [user.email]);\n\n  const logout = () => {\n    setIsLoading(true);\n    signOut(auth).then(() => {}).catch(error => {}).finally(() => setIsLoading(false));\n  };\n\n  const saveUser = (email, displayName, method) => {\n    const user = {\n      email,\n      displayName\n    };\n    fetch('https://polar-savannah-62685.herokuapp.com/users', {\n      method: method,\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify(user)\n    }).then();\n  };\n\n  return {\n    user,\n    isLoading,\n    authError,\n    admin,\n    registerUser,\n    loginUser,\n    signInWithGoogle,\n    logout\n  };\n};\n\n_s(useFirebase, \"Kefwfqnjsc3mUdigIh3SWQf03vM=\");\n\nexport default useFirebase;","map":{"version":3,"sources":["C:/Projects/sajeeb/client/src/Hooks/useFirebase.js"],"names":["useEffect","useState","getAuth","createUserWithEmailAndPassword","signInWithEmailAndPassword","onAuthStateChanged","GoogleAuthProvider","signInWithPopup","updateProfile","signOut","initializeAuthentication","useFirebase","user","setUser","authError","setAuthError","isLoading","setIsLoading","admin","setAdmin","console","log","auth","googleProvider","registerUser","email","password","name","history","then","userCredential","newUser","displayName","saveUser","currentUser","catch","error","replace","message","finally","loginUser","location","destination","state","from","signInWithGoogle","result","unsubscribed","fetch","res","json","data","logout","method","headers","body","JSON","stringify"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword, onAuthStateChanged, GoogleAuthProvider, signInWithPopup, updateProfile, signOut } from \"firebase/auth\";\r\nimport initializeAuthentication from '../Pages/Login/Firebase/Firebase.init';\r\n\r\n\r\n\r\ninitializeAuthentication();\r\n\r\n\r\n\r\nconst useFirebase = () => {\r\n    const [user, setUser] = useState({});\r\n    const [authError, setAuthError] = useState('');\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [admin, setAdmin] = useState(false)\r\n    console.log(admin)\r\n\r\n\r\n    const auth = getAuth();\r\n    const googleProvider = new GoogleAuthProvider();\r\n\r\n\r\n    const registerUser = (email, password, name, history) => {\r\n        setIsLoading(true);\r\n        createUserWithEmailAndPassword(auth, email, password)\r\n            .then((userCredential) => {\r\n                setAuthError('');\r\n                const newUser = { email, displayName: name };\r\n                setUser(newUser);\r\n                //Save user to the database\r\n                saveUser(email, name, 'POST')\r\n                // send name to firebase after creation\r\n                updateProfile(auth.currentUser, {\r\n                    displayName: name\r\n                }).then(() => {\r\n                }).catch((error) => {\r\n                });\r\n                history.replace('/');\r\n            })\r\n            .catch((error) => {\r\n                setAuthError(error.message);\r\n                console.log(error);\r\n            })\r\n            .finally(() => setIsLoading(false));\r\n    }\r\n\r\n\r\n    const loginUser = (email, password, location, history) => {\r\n        setIsLoading(true);\r\n        signInWithEmailAndPassword(auth, email, password)\r\n            .then((userCredential) => {\r\n                const destination = location?.state?.from || '/';\r\n                history.replace(destination);\r\n                setAuthError('');\r\n            })\r\n            .catch((error) => {\r\n                setAuthError(error.message);\r\n            })\r\n            .finally(() => setIsLoading(false));\r\n    }\r\n\r\n\r\n    const signInWithGoogle = (location, history) => {\r\n        setIsLoading(true);\r\n        signInWithPopup(auth, googleProvider)\r\n            .then((result) => {\r\n                const user = result.user;\r\n                saveUser(user.email , user.displayName, 'PUT');\r\n                const destination = location?.state?.from || '/';\r\n                history.replace(destination);\r\n                setAuthError('');\r\n            }).catch((error) => {\r\n                setAuthError(error.message);\r\n            }).finally(() => setIsLoading(false));\r\n    }\r\n\r\n    // observer user state\r\n    useEffect(() => {\r\n        const unsubscribed = onAuthStateChanged(auth, (user) => {\r\n            if (user) {\r\n                setUser(user);\r\n            } else {\r\n                setUser({})\r\n            }\r\n            setIsLoading(false);\r\n        });\r\n        return () => unsubscribed;\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        fetch(`https://polar-savannah-62685.herokuapp.com/users/${user.email}`)\r\n            .then(res => res.json())\r\n            .then(data => setAdmin(data.admin))\r\n    }, [user.email])\r\n\r\n    const logout = () => {\r\n        setIsLoading(true);\r\n        signOut(auth).then(() => {\r\n\r\n        }).catch((error) => {\r\n\r\n        })\r\n            .finally(() => setIsLoading(false));\r\n    }\r\n\r\n    const saveUser = (email,displayName,method) => {\r\n        const user = {email,displayName};\r\n        \r\n        fetch('https://polar-savannah-62685.herokuapp.com/users',{\r\n            method:method,\r\n            headers:{\r\n                'content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify(user)\r\n        })\r\n        .then()\r\n    }\r\n\r\n    return {\r\n        user,\r\n        isLoading,\r\n        authError,\r\n        admin,\r\n        registerUser,\r\n        loginUser,\r\n        signInWithGoogle,\r\n        logout,\r\n    }\r\n};\r\n\r\nexport default useFirebase;"]},"metadata":{},"sourceType":"module"}